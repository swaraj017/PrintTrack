<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Customization and Invoice Generator</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>Order Customization and Customer Allocation Form</h1>
    
    <div class="container order-customization">
        <h2>Order Customization</h2>
        <table id="orderTable">
            <thead>
                <tr>
                    <th>Product ID</th>
                    <th>Delivered Quantity</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% order.orderDetail.forEach((detail, index) => { %>
                    <tr>
                        <td><%= detail.productId %></td>
                        <td><%= detail.deliveredQuantity %></td>
                        <td>
                             <button onclick="selectSerials(<%= JSON.stringify(serialArray[index]) %>, <%= index %>)">Select Serials</button>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
        
        <div id="serialSelection" style="display: none;">
            <h2 style="color: green; margin-left: 27rem;">Quantity Selection</h2>
            <div class="selection-mode" style="display: none;">
                <button onclick="setSelectionMode('quantity')">Quantity Selection</button>
            </div>
            <div id="quantitySelection" style="display: none;">
                <label for="quantity" style="font-size: 22px;">Enter Quantity:</label>
                <input type="number" id="quantity" min="1" placeholder="Enter quantity to select" style="width: 50%;">
                <button onclick="applyQuantitySelection()">Apply Quantity</button>
            </div>
            <div id="serialList" class="serial-list">
                <!-- Serial numbers will be populated here -->
            </div>
            <form action="/add-subcustomer" method="POST">
                <div class="search_content" style="display: flex;">
                    <label for="selectedQuantity" style="color: green; font-size: 20px;">Selected Quantity:</label>
                    <input type="number" id="selectedQuantity" readonly style="width: 20%;">
                    <input type="hidden" id="hiddenSelectedQuantity" name="selectedQuantity">  
                    <input type="hidden" id="hiddenSelectedSerials" name="selectedSerials">  
                    
                    <button onclick="generateInvoice()" style="display: none;">Preview Invoice</button> 
                    
                    <h2 style="color: green; margin-left: 2rem;">Search Customer:</h2>
                    <select name="" id="customerType" onchange="toggleForm()">
                        <option value="">Choose Type</option>
                        <option value="search">Search Customer</option>
                        <option value="new">New Customer</option>
                    </select>
                </div>
                <!-- Allocation by details -->
                <div class="New_Customer_Allocation_Form hidden" id="newCustomerForm">
                    <div class="container">
                        <div class="filter-section">
                            <div class="filter-item">
                                <label for="name">Name:</label>
                                <input type="text" id="name" name="name" placeholder="Enter Name">
                            </div>
                            <div class="filter-item">
                                <label for="email">Email:</label>
                                <input type="email" id="email" name="email" placeholder="Enter Email">
                            </div>
                            <div class="filter-item">
                                <label for="contactNumber">Contact Number:</label>
                                <input type="text" id="contactNumber" name="contactNumber" placeholder="Enter Contact Number">
                            </div>
                            <div class="filter-item">
                                <label for="address">Address:</label>
                                <input type="text" id="address" name="address" placeholder="Enter Address">
                            </div>
                            
                            <div class="filter-item">
                                <label for="productId">Product ID:</label>
                                <input type="text" id="productId" name="productId">
                            </div>
            
                            <div class="filter-item">
                                <label for="orderDate">Order Date:</label>
                                <input type="date" id="orderDate" name="orderDate" min="0" step="0.01" placeholder="Enter Order Date">
                            </div>
                        </div>
                        <button onclick="confirmSelection()">ALLOT</button>
                    </div>
                </form>
            </div>
            
            <div class="Allocation_by_details hidden" id="allocationDetails">
                <input type="text" placeholder="Search by anything: number, name, email">
                <button type="submit">Find</button>
            </div>
        </div>
    </div>

<script>
    function toggleForm() {
        var selectedType = document.getElementById('customerType').value;
        
        document.getElementById('allocationDetails').classList.add('hidden');
        document.getElementById('newCustomerForm').classList.add('hidden');

        if (selectedType === 'search') {
            document.getElementById('allocationDetails').classList.remove('hidden');
        } else if (selectedType === 'new') {
            document.getElementById('newCustomerForm').classList.remove('hidden');
        }
    }
</script>

<script>
    let currentSerialArray = [];
    let currentProductIndex = null;
    let selectionMode = 'quantity'; // Default to quantity selection
    let selectedSerials = [];

    function selectSerials(serials, index) {
        currentProductIndex = index;
        currentSerialArray = serials;
        const serialList = document.getElementById('serialList');
        serialList.innerHTML = '';

        currentSerialArray.forEach(serial => {
            const serialItem = document.createElement('div');
            serialItem.classList.add('serial-item');
            serialItem.textContent = serial;
            serialItem.onclick = () => toggleSelection(serialItem, serial);
            serialList.appendChild(serialItem);
        });

        document.getElementById('serialSelection').style.display = 'block';
        document.getElementById('quantitySelection').style.display = 'block'; // Show quantity input section
    }

    function toggleSelection(serialItem, serial) {
        if (selectionMode === 'quantity') {
            // Add or remove serial from selection
            const index = selectedSerials.indexOf(serial);
            if (index === -1) {
                selectedSerials.push(serial);
                serialItem.classList.add('selected');
            } else {
                selectedSerials.splice(index, 1);
                serialItem.classList.remove('selected');
            }
            document.getElementById('selectedQuantity').value = selectedSerials.length;
        }
    }

    function setSelectionMode(mode) {
        selectionMode = mode;
        document.getElementById('quantitySelection').style.display = mode === 'quantity' ? 'block' : 'none';
    }

    function applyQuantitySelection() {
        const quantity = parseInt(document.getElementById('quantity').value);
        if (quantity > 0 && quantity <= currentSerialArray.length) {
            selectedSerials = currentSerialArray.slice(0, quantity);
            updateSerialList();
        } else {
            alert('Invalid quantity. Please ensure it is within the available serials.');
        }
    }

    function updateSerialList() {
        const serialList = document.getElementById('serialList');
        serialList.innerHTML = '';
        currentSerialArray.slice(0, selectedSerials.length).forEach(serial => {
            const serialItem = document.createElement('div');
            serialItem.className = 'serial-item';
            serialItem.classList.add('selected');
            serialItem.textContent = serial;
            serialList.appendChild(serialItem);
        });
        document.getElementById('selectedQuantity').value = selectedSerials.length;
    }

    function confirmSelection() {
        document.getElementById('hiddenSelectedQuantity').value = selectedSerials.length;
        document.getElementById('hiddenSelectedSerials').value = JSON.stringify(selectedSerials);
    }

    function generateInvoice() {
        const orderData = <%- JSON.stringify(order) %>;
        const product = orderData.orderDetail[currentProductIndex];
        const serialsToUse = selectedSerials.length > 0 ? selectedSerials : product.serialArray.slice(0, product.deliveredQuantity);

        const queryParams = new URLSearchParams({
            orderId: orderData._id,
            customerId: orderData.customerId,
            orderDate: new Date(orderData.orderDate).toLocaleDateString(),
            totalPrice: orderData.totalPrice.toLocaleString(),
            productId: product.productId,
            quantity: serialsToUse.length,
            serials: serialsToUse.join(',')
        });

        window.location.href = '/getinvoice?' + queryParams.toString();
    }
</script>
</body>
</html>
